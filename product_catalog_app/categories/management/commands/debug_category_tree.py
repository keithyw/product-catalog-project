from django.core.management.base import BaseCommand
from categories.models import Category, CategorySystem
from django.db import connection


class Command(BaseCommand):
    help = 'Debug category tree structure and path generation'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('=== Category Tree Debug ==='))
        
        # Check current categories
        categories = Category.objects.all().order_by('id')
        self.stdout.write(f'Total categories: {categories.count()}')
        
        for cat in categories:
            self.stdout.write(f'ID: {cat.id}, Name: {cat.name}, Path: {cat.path}, Depth: {cat.depth}, NumChild: {cat.numchild}')
        
        # Check category systems
        systems = CategorySystem.objects.all()
        self.stdout.write(f'\nTotal category systems: {systems.count()}')
        for sys in systems:
            self.stdout.write(f'System ID: {sys.id}, Name: {sys.name}')
        
        # Check database schema for path field
        with connection.cursor() as cursor:
            cursor.execute("DESCRIBE categories_category")
            columns = cursor.fetchall()
            path_column = [col for col in columns if col[0] == 'path']
            if path_column:
                self.stdout.write(f'\nPath column info: {path_column[0]}')
        
        # Try to get next path that would be generated
        try:
            if categories.exists():
                last_root = Category.get_last_root_node()
                if last_root:
                    self.stdout.write(f'\nLast root node: ID={last_root.id}, Path={last_root.path}')
                else:
                    self.stdout.write('\nNo root nodes found')
            
            # Check what the next path would be
            from treebeard.mp_tree import MP_AddRootHandler
            handler = MP_AddRootHandler(Category, name="test", category_system_id=1)
            # This won't actually create, just check what path would be used
            self.stdout.write(f'Next root path would be generated by treebeard')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'Error checking next path: {e}'))
        
        # Check for any orphaned or problematic records
        try:
            problems = Category.find_problems()
            if problems:
                self.stdout.write(f'\nTree problems: {len(problems)}')
                for i, problem in enumerate(problems[:3]):
                    self.stdout.write(f'  Problem {i+1}: {problem}')
            else:
                self.stdout.write('\nNo tree problems detected')
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'Error checking problems: {e}'))
        
        self.stdout.write(self.style.SUCCESS('\n=== Debug Complete ==='))
